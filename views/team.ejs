    <!-- Header -->
    <header class="bg-white shadow-sm">
        <div class="max-w-7xl mx-auto px-4 py-4 flex justify-between items-center">
            <div class="flex items-center space-x-8">
                <h1 class="text-xl font-bold text-gray-900">Team Management</h1>
                <div id="selectedTeamDisplay" class="text-xl font-bold text-gray-900 hidden"></div>
                <% if (user) { %>
                    <div class="dropdown" id="teamsDropdown">
                        <button id="teamsDropdownButton"
                            class="bg-white px-4 py-2 text-gray-700 font-medium rounded-md border hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            Teams
                            <span class="ml-2">â–¼</span>
                        </button>
                        <div class="dropdown-content mt-2" id="teamsMenu">
                            <div class="py-2">
                                <div id="teamsList">
                                    <!-- Teams will be loaded here -->
                                </div>
                                <div class="border-t border-gray-100 mt-2"></div>
                                <a href="#" onclick="showCreateTeamModal()"
                                    class="flex items-center px-4 py-3 text-sm text-indigo-600 hover:bg-gray-50">
                                    <i data-lucide="plus-circle" class="w-4 h-4 mr-2"></i>
                                    Create New Team
                                </a>
                            </div>
                        </div>
                    </div>
                    <% } %>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto px-4 py-6">
        <% if (user) { %>
            <div id="teamMembersList" class="mt-6 hidden">
                <!-- Contribution Section -->
                <div class="contribution-section mb-6">
                    <div class="bg-white shadow rounded-lg p-4">
                        <div id="contributionSettingArea">
                            <!-- Contribution setting form for team creator -->
                            <div id="setContributionForm" class="mb-4" style="display: none;">
                                <div class="flex items-center space-x-4">
                                    <div class="flex-1">
                                        <label for="contributionAmount"
                                            class="block text-sm font-medium text-gray-700">Set Contribution Amount Per
                                            Member</label>
                                        <div class="mt-1 relative rounded-md shadow-sm">
                                            <div
                                                class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                                <span class="text-gray-500 sm:text-sm">$</span>
                                            </div>
                                            <input type="number" name="contributionAmount" id="newContributionAmount"
                                                class="focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-7 pr-12 sm:text-sm border-gray-300 rounded-md"
                                                placeholder="0.00" min="0" step="0.01">
                                        </div>
                                    </div>
                                    <button onclick="setContributionAmount(currentTeamId)"
                                        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                        Set Amount
                                    </button>
                                </div>
                            </div>
                            <!-- Contribution status will be shown here -->
                            <div id="contributionStatus"></div>
                        </div>
                    </div>
                </div>

                <!-- Team Members Section -->
                <h3 class="text-lg font-medium text-gray-900 mb-4">Team Members</h3>
                <div class="space-y-4">
                    <!-- Team members will be loaded here -->
                </div>
            </div>

            <% } else { %>
                <div class="text-center py-12">
                    <h2 class="text-3xl font-extrabold text-gray-900 mb-4">Welcome to Team Management</h2>
                    <p class="text-lg text-gray-600 mb-8">Login to create or join teams.</p>
                    <a href="/"
                        class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">
                        Get Started
                    </a>
                </div>
                <% } %>
    </main>

    <!-- Create Team Modal -->
    <div id="createTeamModal" class="modal">
        <div class="modal-content">
            <h3 class="text-lg font-medium text-gray-900 mb-4">Create New Team</h3>
            <input type="text" id="teamName"
                class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                placeholder="Enter team name">
            <div class="mt-4 flex justify-end space-x-3">
                <button onclick="hideCreateTeamModal()"
                    class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                    Cancel
                </button>
                <button onclick="createTeam()"
                    class="px-4 py-2 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-md hover:bg-indigo-700">
                    Create
                </button>
            </div>
        </div>
    </div>

  <!-- Toast Notification -->
    <div id="toast" class="toast"></div>
    <script src="https://cdn.tailwindcss.com"></script>

    <script>

        document.addEventListener('DOMContentLoaded', function () {
            console.log("DOM fully loaded");
            // Add click event listener to dropdown button
            const dropdownButton = document.getElementById('teamsDropdownButton');
            if (dropdownButton) {
                dropdownButton.addEventListener('click', function (event) {
                    toggleTeamsDropdown(event);
                });
            }
        });
        // Dropdown functionality
        function toggleTeamsDropdown(event) {
            if (event) {
                event.stopPropagation();
            }
            const dropdown = document.getElementById('teamsDropdown');
            dropdown.classList.toggle('active');
        }

        // Close dropdowns when clicking outside
        document.addEventListener('click', function (event) {
            const teamsDropdown = document.getElementById('teamsDropdown');
            if (!event.target.closest('#teamsDropdown')) {
                if (teamsDropdown) {
                    teamsDropdown.classList.remove('active');
                }
            }
        });

        const currentUser = {
            id: '<%= user?.id %>',
            name: '<%= user?.name %>',
            email: '<%= user?.email %>'
        };
        let currentTeamId = null;

        function selectTeam(teamId, teamName) {
            currentTeamId = teamId;

            // Update header display
            const teamDisplay = document.getElementById('selectedTeamDisplay');
            if (teamDisplay) {
                teamDisplay.textContent = teamName;
                teamDisplay.classList.remove('hidden');
            }

            // Close dropdown
            const dropdown = document.getElementById('teamsDropdown');
            if (dropdown) {
                dropdown.classList.remove('active');
            }

            // Hide previous team content if exists
            const membersList = document.getElementById('teamMembersList');
            if (membersList) {
                membersList.classList.add('hidden');
            }

            // Load team members
            loadTeamMembers(teamId);
        }

        // Update the window click handler
        window.onclick = function (event) {
            const teamsDropdown = document.getElementById('teamsDropdown');
            if (!event.target.closest('#teamsDropdown')) {
                teamsDropdown.classList.remove('active');
            }
        }

        // Toast notification function
        function showToast(message, type) {
            const toast = document.getElementById('toast');
            toast.textContent = message;
            toast.className = `toast ${type}`;
            toast.style.display = 'block';
            setTimeout(() => {
                toast.style.display = 'none';
            }, 3000);
        }

        // Teams functionality
        async function loadTeams() {
            try {
                const response = await fetch('/api/teams');
                const teams = await response.json();
                const teamsList = document.getElementById('teamsList');

                teamsList.innerHTML = teams.map(team => `
                 <div class="team-item px-4 py-3 hover:bg-gray-50 cursor-pointer" onclick="selectTeam('${team.id}', '${team.name}')">
                    <div class="team-item px-4 py-3 hover:bg-gray-50">
                        <div class="flex justify-between items-center">
                            <div class="flex items-center">
                                <span class="text-sm text-gray-700 font-medium">${team.name}</span>
                                ${team.is_creator
                        ? '<span class="team-badge bg-indigo-100 text-indigo-800">Owner</span>'
                        : '<span class="team-badge bg-gray-100 text-gray-800">Member</span>'
                    }
                            </div>
                            <div class="flex items-center space-x-2">
                                ${team.is_creator ? `
                                    <button 
                                        onclick="generateInviteLink('${team.id}')"
                                        class="team-action-button text-indigo-600 hover:text-indigo-800"
                                        title="Generate Invite Link"
                                    >
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4">
                                            <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path>
                                            <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path>
                                        </svg>
                                    </button>
                                    <button 
                                        onclick="deleteTeam('${team.id}')"
                                        class="team-action-button text-red-600 hover:text-red-800"
                                        title="Delete Team"
                                    >
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4">
                                            <path d="M3 6h18"></path>
                                            <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path>
                                            <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path>
                                            <line x1="10" y1="11" x2="10" y2="17"></line>
                                            <line x1="14" y1="11" x2="14" y2="17"></line>
                                        </svg>
                                    </button>
                                ` : `
                                    <button 
                                        onclick="leaveTeam('${team.id}')"
                                        class="team-action-button text-gray-600 hover:text-gray-800"
                                        title="Leave Team"
                                    >
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4">
                                            <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
                                            <polyline points="16 17 21 12 16 7"></polyline>
                                            <line x1="21" y1="12" x2="9" y2="12"></line>
                                        </svg>
                                    </button>
                                `}
                            </div>
                        </div>
                    </div>
                 </div>
                    `).join('');
            } catch (error) {
                showToast('Error loading teams', 'error');
            }
        }


        async function loadTeamMembers(teamId) {
            try {
                const response = await fetch(`/api/teams/${teamId}/members`);
                if (!response.ok) {
                    throw new Error('Failed to load team members');
                }

                const teamDetails = await response.json();
                const membersList = document.getElementById('teamMembersList');

                if (!membersList) return;

                membersList.classList.remove('hidden');

                // Get the contribution setting form and status divs
                const setContributionForm = document.getElementById('setContributionForm');
                const contributionStatus = document.getElementById('contributionStatus');
                const membersContainer = membersList.querySelector('.space-y-4');

                // Clear previous content
                contributionStatus.innerHTML = '';
                membersContainer.innerHTML = '';  // Clear existing members

                // Show/hide contribution form based on if user is creator
                const isCreator = teamDetails.created_by === currentUser.id;

                // First, handle the contribution section
                if (isCreator) {
                    if (!teamDetails.contribution_amount || teamDetails.contribution_amount === 0) {
                        // Show the input form for setting contribution amount
                        contributionStatus.innerHTML = `
                    <div class="bg-white shadow rounded-lg p-4 mb-6">
                        <h4 class="text-lg font-medium text-gray-900 mb-4">Set Team Contribution</h4>
                        <div class="flex items-center space-x-4">
                            <div class="flex-1">
                                <label for="contributionAmount" class="block text-sm font-medium text-gray-700 mb-2">
                                    Amount per member ($)
                                </label>
                                <div class="relative rounded-md shadow-sm">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <span class="text-gray-500 sm:text-sm">$</span>
                                    </div>
                                    <input type="number" 
                                           name="contributionAmount" 
                                           id="contributionAmount" 
                                           class="focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-7 pr-12 sm:text-sm border-gray-300 rounded-md" 
                                           placeholder="0.00" 
                                           min="0" 
                                           step="0.01">
                                </div>
                            </div>
                            <button onclick="setContributionAmount('${teamId}')"
                                    class="px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                Set Amount
                            </button>
                        </div>
                    </div>`;
                    } else {
                        // Show contribution status with edit option
                        const totalAmount = teamDetails.members.length * teamDetails.contribution_amount;
                        const collectedAmount = teamDetails.members.filter(m => m.has_paid).length * teamDetails.contribution_amount;
                        const remainingAmount = totalAmount - collectedAmount;

                        contributionStatus.innerHTML = `
                    <div class="bg-white shadow rounded-lg p-4 mb-6">
                        <div class="flex justify-between items-center mb-4">
                            <h4 class="text-lg font-medium text-gray-900">Team Contribution</h4>
                            <button onclick="editContributionAmount('${teamId}', ${teamDetails.contribution_amount})"
                                    class="text-sm text-indigo-600 hover:text-indigo-800">
                                Edit Amount
                            </button>
                        </div>
                        <div class="grid grid-cols-2 gap-4 mb-4">
                            <div>
                                <p class="text-sm text-gray-600">Amount per member</p>
                                <p class="text-lg font-medium">$${teamDetails.contribution_amount}</p>
                            </div>
                            <div>
                                <p class="text-sm text-gray-600">Total amount needed</p>
                                <p class="text-lg font-medium">$${totalAmount}</p>
                            </div>
                            <div>
                                <p class="text-sm text-gray-600">Amount collected</p>
                                <p class="text-lg font-medium text-green-600">$${collectedAmount}</p>
                            </div>
                            <div>
                                <p class="text-sm text-gray-600">Amount remaining</p>
                                <p class="text-lg font-medium text-red-600">$${remainingAmount}</p>
                            </div>
                        </div>
                        <div class="w-full bg-gray-200 rounded-full h-2">
                            <div class="bg-indigo-600 h-2 rounded-full" 
                                style="width: ${(collectedAmount / totalAmount * 100) || 0}%"></div>
                        </div>
                    </div>
                `;
                    }
                } else if (teamDetails.contribution_amount > 0) {
                    // Show read-only contribution status for non-creators
                    const totalAmount = teamDetails.members.length * teamDetails.contribution_amount;
                    const collectedAmount = teamDetails.members.filter(m => m.has_paid).length * teamDetails.contribution_amount;
                    const remainingAmount = totalAmount - collectedAmount;

                    contributionStatus.innerHTML = `
                <div class="bg-white shadow rounded-lg p-4 mb-6">
                    <h4 class="text-lg font-medium text-gray-900 mb-4">Team Contribution</h4>
                    <div class="grid grid-cols-2 gap-4 mb-4">
                        <div>
                            <p class="text-sm text-gray-600">Amount per member</p>
                            <p class="text-lg font-medium">$${teamDetails.contribution_amount}</p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Total amount needed</p>
                            <p class="text-lg font-medium">$${totalAmount}</p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Amount collected</p>
                            <p class="text-lg font-medium text-green-600">$${collectedAmount}</p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Amount remaining</p>
                            <p class="text-lg font-medium text-red-600">$${remainingAmount}</p>
                        </div>
                    </div>
                    <div class="w-full bg-gray-200 rounded-full h-2">
                        <div class="bg-indigo-600 h-2 rounded-full" 
                            style="width: ${(collectedAmount / totalAmount * 100) || 0}%"></div>
                    </div>
                </div>
            `;
                }

                // Add members list (keeping the existing member list code)
                for (const member of teamDetails.members) {
                    console.log(member);
                    const memberDiv = document.createElement('div');
                    memberDiv.className = 'bg-white shadow rounded-lg p-4 flex items-center justify-between';

                    const isTeamOwner = member.user_id === teamDetails.created_by;

                    memberDiv.innerHTML = `
                <div class="flex items-center space-x-4">
 
                   <div>
                        <div class="flex items-center">
                            <span class="font-medium text-gray-900">${member.name}</span>
                            ${isTeamOwner ?
                            '<span class="ml-2 px-2 py-1 text-xs font-medium text-indigo-800 bg-indigo-100 rounded">Team Owner</span>'
                            : ''}
                        </div>
                        <div class="text-sm text-gray-500">${member.email}</div>
                    </div>
                </div>
                <div class="flex items-center space-x-4">
                    ${member.has_paid
                            ? '<span class="px-2 py-1 text-sm font-medium text-green-800 bg-green-100 rounded">Paid</span>'
                            : '<span class="px-2 py-1 text-sm font-medium text-red-800 bg-red-100 rounded">Pending</span>'
                        }
                    ${isCreator ? `
                        <button onclick="updatePaymentStatus('${teamId}', '${member.user_id}', ${!member.has_paid})"
                                class="px-3 py-1 text-sm font-medium ${member.has_paid ? 'text-red-600' : 'text-green-600'} border border-gray-300 rounded-md hover:bg-gray-50">
                            ${member.has_paid ? 'Mark Unpaid' : 'Mark Paid'}
                        </button>
                    ` : ''}
                </div>
            `;

                    membersContainer.appendChild(memberDiv);
                }
            } catch (error) {
                console.error('Error loading team members:', error);
                showToast('Error loading team members: ' + error.message, 'error');
            }
        }

        // Update payment status function remains the same
        async function updatePaymentStatus(teamId, memberId, hasPaid) {
            try {
                const response = await fetch(`/api/teams/${teamId}/members/${memberId}/payment`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ hasPaid })
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error);
                }

                showToast('Payment status updated successfully', 'success');
                loadTeamMembers(teamId);  // Only reload team members
            } catch (error) {
                showToast(error.message, 'error');
            }
        }


        // Add function to edit contribution amount
        // Function to edit contribution amount
        function editContributionAmount(teamId, currentAmount) {
            const contributionStatus = document.getElementById('contributionStatus');
            contributionStatus.innerHTML = `
        <div class="bg-white shadow rounded-lg p-4 mb-6">
            <h4 class="text-lg font-medium text-gray-900 mb-4">Edit Team Contribution</h4>
            <div class="flex items-center space-x-4">
                <div class="flex-1">
                    <label for="newContributionAmount" class="block text-sm font-medium text-gray-700 mb-2">
                        Amount per member ($)
                    </label>
                    <div class="relative rounded-md shadow-sm">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <span class="text-gray-500 sm:text-sm">$</span>
                        </div>
                        <input type="number" 
                               name="updateContributionAmount" 
                               id="updateContributionAmount" 
                               class="focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-7 pr-12 sm:text-sm border-gray-300 rounded-md" 
                               value="${currentAmount}"
                               min="0" 
                               step="0.01">
                    </div>
                </div>
                <button onclick="updateContributionAmount('${teamId}')"
                        class="px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    Update Amount
                </button>
            </div>
        </div>`;
        }

        // Separate function for updating the contribution amount
        async function updateContributionAmount(teamId) {
            // Get the input element using the new ID
            const amountInput = document.getElementById('updateContributionAmount');
            console.log('Team ID:',  teamId )
            console.log('Input element found:', !!amountInput);
            console.log('Raw input value:', amountInput?.value);

            // Ensure the input exists
            if (!amountInput) {
                showToast('Could not find contribution amount input', 'error');
                return;
            }

            // Parse the amount and handle potential issues
            const amount = parseFloat(amountInput.value.trim());
            console.log('Parsed amount:', amount);

            // Validate the amount
            if (!amount || isNaN(amount) || amount <= 0) {
                console.log('Validation failed:', {
                    isNaN: isNaN(amount),
                    isZeroOrLess: amount <= 0,
                    isEmpty: !amount
                });
                showToast('Please enter a valid amount greater than 0', 'error');
                return;
            }

            try {
                const response = await fetch(`/api/teams/${teamId}/contribution`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ amount })
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error);
                }

                showToast('Contribution amount updated successfully', 'success');
                // Reload team members to update the contribution display
                loadTeamMembers(teamId);
            } catch (error) {
                console.error('API Error:', error);
                showToast(error.message, 'error');
            }
        }

        // Add function to set contribution amount
        async function setContributionAmount(teamId) {
            // Get the input element
            const amountInput = document.getElementById('contributionAmount');

            // Add console logs for debugging
            console.log('Raw input value:', amountInput?.value);

            // Ensure the input exists
            if (!amountInput) {
                showToast('Could not find contribution amount input', 'error');
                return;
            }

            // Parse the amount and handle potential issues
            const amount = parseFloat(amountInput.value.trim());
            console.log('Parsed amount:', amount);

            // Validate the amount
            if (!amount || isNaN(amount) || amount <= 0) {
                console.log('Validation failed:', {
                    isNaN: isNaN(amount),
                    isZeroOrLess: amount <= 0,
                    isEmpty: !amount
                });
                showToast('Please enter a valid amount greater than 0', 'error');
                return;
            }

            try {
                const response = await fetch(`/api/teams/${teamId}/contribution`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ amount })
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error);
                }

                showToast('Contribution amount set successfully', 'success');
                // Reload team members to update the contribution display
                loadTeamMembers(teamId);
            } catch (error) {
                console.error('API Error:', error);
                showToast(error.message, 'error');
            }
        }

        // Update the payment status function to only reload team members
        async function updatePaymentStatus(teamId, memberId, hasPaid) {
            try {
                const response = await fetch(`/api/teams/${teamId}/members/${memberId}/payment`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ hasPaid })
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error);
                }

                showToast('Payment status updated successfully', 'success');
                loadTeamMembers(teamId);  // Only reload team members
            } catch (error) {
                showToast(error.message, 'error');
            }
        }


        // Add new function to handle leaving a team
        async function leaveTeam(teamId) {
            if (!confirm('Are you sure you want to leave this team?')) return;

            try {
                const response = await fetch(`/api/teams/${teamId}/leave`, {
                    method: 'POST'
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error);
                }

                await loadTeams();
                showToast('Successfully left the team', 'success');
            } catch (error) {
                showToast(error.message, 'error');
            }
        }


        function showCreateTeamModal() {
            document.getElementById('createTeamModal').style.display = 'block';
            document.getElementById('teamName').focus();
        }

        function hideCreateTeamModal() {
            document.getElementById('createTeamModal').style.display = 'none';
            document.getElementById('teamName').value = '';
        }

        async function createTeam() {
            const teamName = document.getElementById('teamName').value.trim();
            if (!teamName) {
                showToast('Please enter a team name', 'error');
                return;
            }

            try {
                const response = await fetch('/api/teams', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ name: teamName })
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error);
                }

                hideCreateTeamModal();
                await loadTeams();
                showToast('Team created successfully', 'success');
            } catch (error) {
                showToast(error.message, 'error');
            }
        }

        async function generateInviteLink(teamId) {
            try {
                const response = await fetch(`/api/teams/${teamId}/invite`, {
                    method: 'POST'
                });
                const data = await response.json();

                await navigator.clipboard.writeText(data.inviteLink);
                showToast('Invite link copied to clipboard', 'success');
            } catch (error) {
                showToast('Error generating invite link', 'error');
            }
        }

        async function deleteTeam(teamId) {
            if (!confirm('Are you sure you want to delete this team?')) return;

            try {
                const response = await fetch(`/api/teams/${teamId}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error);
                }

                await loadTeams();
                showToast('Team deleted successfully', 'success');
            } catch (error) {
                showToast(error.message, 'error');
            }
        }

        // Initialize
        if (document.getElementById('teamsList')) {
            loadTeams();
        }

        // Your existing functions remain the same
        function showCreateTeamModal() {
            document.getElementById('createTeamModal').style.display = 'block';
            document.getElementById('teamName').focus();
        }

        // Handle URL parameters for messages
        const urlParams = new URLSearchParams(window.location.search);
        const message = urlParams.get('message');
        const error = urlParams.get('error');

        if (message === 'team_joined') {
            showToast('Successfully joined team', 'success');
        }
        if (error) {
            showToast(error, 'error');
        }
    </script>